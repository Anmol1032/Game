from mobs.main_class import *

model = Mesh(
    vertices=(
        (-0.0, -1.0, 0.0), (0.7236, -0.447215, -0.52572), (-0.276385, -0.447215, -0.85064),
        (0.7236, -0.447215, -0.52572),
        (-0.0, -1.0, 0.0), (0.7236, -0.447215, 0.52572), (-0.0, -1.0, 0.0), (-0.276385, -0.447215, -0.85064),
        (-0.894425, -0.447215, 0.0), (-0.0, -1.0, 0.0), (-0.894425, -0.447215, 0.0),
        (-0.276385, -0.447215, 0.85064),
        (-0.0, -1.0, 0.0), (-0.276385, -0.447215, 0.85064), (0.7236, -0.447215, 0.52572),
        (0.7236, -0.447215, -0.52572),
        (0.7236, -0.447215, 0.52572), (0.894425, 0.447215, 0.0), (-0.276385, -0.447215, -0.85064),
        (0.7236, -0.447215, -0.52572), (0.276385, 0.447215, -0.85064), (-0.894425, -0.447215, 0.0),
        (-0.276385, -0.447215, -0.85064), (-0.7236, 0.447215, -0.52572), (-0.276385, -0.447215, 0.85064),
        (-0.894425, -0.447215, 0.0), (-0.7236, 0.447215, 0.52572), (0.7236, -0.447215, 0.52572),
        (-0.276385, -0.447215, 0.85064), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, -0.52572),
        (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064), (-0.276385, -0.447215, -0.85064),
        (0.276385, 0.447215, -0.85064), (-0.7236, 0.447215, -0.52572), (-0.894425, -0.447215, 0.0),
        (-0.7236, 0.447215, -0.52572), (-0.7236, 0.447215, 0.52572), (-0.276385, -0.447215, 0.85064),
        (-0.7236, 0.447215, 0.52572), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, 0.52572),
        (0.276385, 0.447215, 0.85064), (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064),
        (0.894425, 0.447215, 0.0),
        (-0.0, 1.0, 0.0), (-0.7236, 0.447215, -0.52572), (0.276385, 0.447215, -0.85064), (-0.0, 1.0, 0.0),
        (-0.7236, 0.447215, 0.52572), (-0.7236, 0.447215, -0.52572), (-0.0, 1.0, 0.0),
        (0.276385, 0.447215, 0.85064),
        (-0.7236, 0.447215, 0.52572), (-0.0, 1.0, 0.0), (0.894425, 0.447215, 0.0),
        (0.276385, 0.447215, 0.85064),
        (-0.0, 1.0, 0.0)),
    normals=[(0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774),
             (0.6071, -0.7947, 0.0),
             (0.6071, -0.7947, 0.0), (0.6071, -0.7947, 0.0), (-0.4911, -0.7947, -0.3568),
             (-0.4911, -0.7947, -0.3568),
             (-0.4911, -0.7947, -0.3568), (-0.4911, -0.7947, 0.3568), (-0.4911, -0.7947, 0.3568),
             (-0.4911, -0.7947, 0.3568), (0.1876, -0.7947, 0.5774), (0.1876, -0.7947, 0.5774),
             (0.1876, -0.7947, 0.5774), (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0),
             (0.3035, -0.1876, -0.9342), (0.3035, -0.1876, -0.9342), (0.3035, -0.1876, -0.9342),
             (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, -0.5774),
             (-0.7946, -0.1876, 0.5774), (-0.7946, -0.1876, 0.5774), (-0.7946, -0.1876, 0.5774),
             (0.3035, -0.1876, 0.9342), (0.3035, -0.1876, 0.9342), (0.3035, -0.1876, 0.9342),
             (0.7946, 0.1876, -0.5774),
             (0.7946, 0.1876, -0.5774), (0.7946, 0.1876, -0.5774), (-0.3035, 0.1876, -0.9342),
             (-0.3035, 0.1876, -0.9342), (-0.3035, 0.1876, -0.9342), (-0.9822, 0.1876, 0.0),
             (-0.9822, 0.1876, 0.0),
             (-0.9822, 0.1876, 0.0), (-0.3035, 0.1876, 0.9342), (-0.3035, 0.1876, 0.9342),
             (-0.3035, 0.1876, 0.9342),
             (0.7946, 0.1876, 0.5774), (0.7946, 0.1876, 0.5774), (0.7946, 0.1876, 0.5774),
             (0.4911, 0.7947, -0.3568),
             (0.4911, 0.7947, -0.3568), (0.4911, 0.7947, -0.3568), (-0.1876, 0.7947, -0.5774),
             (-0.1876, 0.7947, -0.5774), (-0.1876, 0.7947, -0.5774), (-0.6071, 0.7947, 0.0),
             (-0.6071, 0.7947, 0.0),
             (-0.6071, 0.7947, 0.0), (-0.1876, 0.7947, 0.5774), (-0.1876, 0.7947, 0.5774),
             (-0.1876, 0.7947, 0.5774),
             (0.4911, 0.7947, 0.3568), (0.4911, 0.7947, 0.3568), (0.4911, 0.7947, 0.3568)],
    uvs=(
        (1.0, 0.0), (0.0, 1.0), (1.0, 1.0), (0.0, 1.0), (1.0, -0.0), (1.0, 1.0), (1.0, 1.0), (0.0, 0.0),
        (1.0, 0.0),
        (1.0, 1.0), (-0.0, 0.0), (1.0, 0.0), (-0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (1.0, 0.0), (0.0, 1.0),
        (1.0, 1.0),
        (1.0, 0.0), (-0.0, 0.0), (0.0, 1.0), (0.0, 1.0), (-0.0, 0.0), (1.0, -0.0), (1.0, 1.0), (-0.0, 1.0),
        (0.0, 0.0),
        (1.0, 1.0), (-0.0, 1.0), (-0.0, 0.0), (-0.0, 0.0), (-0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0),
        (0.0, 1.0), (1.0, 0.0), (0.0, 1.0), (1.0, 1.0), (0.0, 1.0), (1.0, -0.0), (1.0, 1.0), (1.0, 1.0),
        (0.0, 0.0),
        (1.0, 0.0), (1.0, 1.0), (-0.0, 0.0), (1.0, 0.0), (-0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (1.0, 0.0),
        (0.0, 1.0), (1.0, 1.0),
        (1.0, 0.0), (-0.0, 0.0), (0.0, 1.0), (0.0, 1.0), (-0.0, 0.0), (1.0, -0.0), (1.0, 1.0), (-0.0, 1.0),
        (0.0, 0.0),
        (1.0, 1.0), (-0.0, 1.0), (-0.0, 0.0), (-0.0, 0.0), (-0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (0.0, 0.0),
        (0.0, 1.0)),
    mode='triangle')


class Karate(Enemy):
    def __init__(self, **kwargs):
        self.its_type = 'graper'
        self.tag = '#fly'

        self.max_hp = 35
        self.hp = self.max_hp

        self.xp_to_give = 7

        super(Karate, self).__init__(model=model, collider='mesh', **kwargs)

        self.can_damage = True

        self.attack_seq = Sequence(
            Func(self.animate_position,
                 self.player.position + Vec3(random.uniform(-10, 10), random.uniform(6, 8), random.uniform(-10, 10)),
                 4, curve=curve.in_out_back))
        self.attack_seq.start()
        self.animations.append(self.attack_seq)

    def sound(self):
        sound = Audio('coin_3', pitch=0.7492, volume=1)
        sound.position = self.position

    def update(self):

        dist = distance(self.player, self)

        if dist < 3:
            if self.can_damage:
                self.can_damage = False
                invoke(setattr, self, 'can_damage', True, delay=1)
                self.player.hp -= 5

        elif dist < 17:
            if self.attack_seq.finished:
                self.attack_seq = Sequence(
                    Func(self.animate_position, self.player.position, 1, curve=curve.in_back_boomerang),
                    Func(self.blink, color.green.tint(.3)),
                    Wait(1.1),
                    Func(self.animate_position,
                         self.player.position + Vec3(random.uniform(-10, 10), random.uniform(6, 8),
                                                     random.uniform(-10, 10)),
                         4, curve=curve.in_out_back),
                    Wait(4.1),
                )
                self.animations.append(self.attack_seq)
                self.attack_seq.start()


            elif self.attack_seq.paused:
                self.attack_seq.resume()


        else:
            self.attack_seq.pause()
            self.look_at(self.player.position)
            self.position += self.forward * time.dt * 7

        super(Karate, self).update()